const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const { v4: uuidv4 } = require('uuid');
const { Utilisateur, Chercheur } = require('../models');
const nodemailer = require('nodemailer');
const transporter = require('../utiles/mailer.js');



// ‚úÖ Email format validator
const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);




// ‚úÖ Login (unchanged)
exports.login = async (req, res) => {
  try {
    const { Mails, password } = req.body;

    if (!Mails || !password) {
      return res.status(400).json({
        status: 'error',
        message: 'Mails et mot de passe requis.',
        error: 'Champs manquants'
      });
    }

    const utilisateur = await Utilisateur.findOne({
      where: { Mails },
      include: [{ model: Chercheur, as: 'Chercheur', required: false }]
    });

    if (!utilisateur) {
      return res.status(404).json({
        status: 'error',
        message: 'Email introuvable.',
        error: 'Utilisateur non trouv√©'
      });
    }

    const isMatch = await bcrypt.compare(password, utilisateur.password);
    if (!isMatch) {
      return res.status(401).json({
        status: 'error',
        message: 'Mot de passe incorrect.',
        error: 'Comparaison √©chou√©e'
      });
    }

    const token = jwt.sign(
      {
        utilisateur_id: utilisateur.utilisateur_id,
        Mails: utilisateur.Mails,
        R√¥le: utilisateur.R√¥le
      },
      process.env.SECRET_KEY,
      { expiresIn: '10d' }
    );
    console.log(`[LOGIN] R√¥le de l'utilisateur: ${utilisateur.R√¥le}`);

    return res.status(200).json({
      status: 'success',
      message: 'Connexion r√©ussie.',
      data: {
        token,
        utilisateur: {
          utilisateur_id: utilisateur.utilisateur_id,
          Mails: utilisateur.Mails,
          R√¥le: utilisateur.R√¥le,
          T√©l: utilisateur.T√©l,
          chercheur: utilisateur.Chercheur || null
        }
      }
    });

  } catch (error) {
    console.error('[LOGIN] Erreur serveur:', error);
    return res.status(500).json({
      status: 'error',
      message: 'Erreur serveur pendant la connexion.',
      error: error.message
    });
  }

  
};

exports.requestPasswordReset = async (req, res) => {
    try {
        console.log('[RESET] Demande de r√©initialisation re√ßue');
    
        const { email } = req.body;
        if (!email) {
          console.warn('[RESET] Email non fourni');
          return res.status(400).json({ message: 'Email requis.' });
        }
    
        const utilisateur = await Utilisateur.findOne({ where: { Mails : email } });
        if (!utilisateur) {
          console.warn(`[RESET] Aucun utilisateur trouv√© pour l‚Äôemail : ${email}`);
          return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
        }
    
        // G√©n√©rer token JWT pour r√©initialisation
        const token = jwt.sign(
          { utilisateur_id: utilisateur.utilisateur_id },
          process.env.RESET_PASSWORD_SECRET, // Cl√© secr√®te pour signer le token
          { expiresIn: '10m' } // Expiration du token dans 10 minutes
        );
    
        const resetLink = `https://ton-frontend.com/reset-password?token=${token}`;
    
        // Envoi du lien de r√©initialisation dans l'email
        await transporter.sendMail({
          from: '"ESI Auth System" <lmcslabo@gmail.com>',
          to: email,
          subject: 'R√©initialisation de votre mot de passe',
          html: `<p>Bonjour,<br><br>Voici votre lien de r√©initialisation de mot de passe : <a href="${resetLink}">${resetLink}</a><br><br>Le lien expire dans 10 minutes.</p>`
        });
    
        console.log(`[RESET] Lien de r√©initialisation envoy√© √† ${email}`);
        return res.status(200).json({ message: 'Lien de r√©initialisation envoy√© par email.' });
    
      } catch (error) {
        console.error('[RESET] Erreur serveur :', error);
        return res.status(500).json({ message: 'Erreur serveur lors de la demande de r√©initialisation.' });
      }
};

// ‚úÖ Confirm Password Reset (unchanged)
exports.confirmPasswordReset = async (req, res) => {
    try {
        console.log('[CONFIRM] Confirmation de r√©initialisation en cours');
    
        const { token, newPassword } = req.body;
    
        if (!token || !newPassword) {
          console.warn('[CONFIRM] Donn√©es manquantes');
          return res.status(400).json({ message: 'Token et nouveau mot de passe requis.' });
        }
    
        const decoded = jwt.verify(token, process.env.RESET_PASSWORD_SECRET);
    
        // R√©cup√©rer l'ID utilisateur du token
        const utilisateur = await Utilisateur.findByPk(decoded.utilisateur_id);
    
        if (!utilisateur) {
          return res.status(404).json({ message: 'Utilisateur introuvable.' });
        }
    
        // Hacher le nouveau mot de passe
        const hashedPassword = await bcrypt.hash(newPassword, 10);
    
        // Mettre √† jour le mot de passe
        utilisateur.password = hashedPassword;
        await utilisateur.save();
    
        return res.status(200).json({ message: 'Mot de passe mis √† jour avec succ√®s.' });
    
      } catch (error) {
        console.error('[CONFIRM] Erreur lors de la v√©rification du token :', error);
        return res.status(400).json({ message: 'Token invalide ou expir√©.' });
      }
};


// ‚úÖ Update Password (logged-in users ‚Äî NOT Admin)
exports.updatePasswordLoggedIn = async (req, res) => {
  try {
    const { utilisateur_id, R√¥le } = req.user;
    const { oldPassword, newPassword } = req.body;

    // üö´ Admins must use the dedicated route
    if (R√¥le === 'Admin') {
      return res.status(403).json({
        status: 'error',
        message: 'Les administrateurs doivent utiliser la route sp√©ciale pour changer un mot de passe.'
      });
    }

    if (!oldPassword || !newPassword) {
      return res.status(400).json({
        status: 'error',
        message: 'Ancien et nouveau mot de passe requis.',
        error: 'Champs manquants'
      });
    }

    const utilisateur = await Utilisateur.findByPk(utilisateur_id);
    if (!utilisateur) {
      return res.status(404).json({
        status: 'error',
        message: 'Utilisateur introuvable.',
        error: 'ID utilisateur invalide'
      });
    }

    const isMatch = await bcrypt.compare(oldPassword, utilisateur.password);
    if (!isMatch) {
      return res.status(401).json({
        status: 'error',
        message: 'Ancien mot de passe incorrect.',
        error: 'Comparaison √©chou√©e'
      });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    utilisateur.password = hashedPassword;
    await utilisateur.save();

    return res.status(200).json({
      status: 'success',
      message: 'Mot de passe mis √† jour avec succ√®s.'
    });

  } catch (error) {
    console.error('[UPDATE PASSWORD] Erreur:', error);
    return res.status(500).json({
      status: 'error',
      message: 'Erreur serveur lors de la mise √† jour du mot de passe.',
      error: error.message
    });
  }
};